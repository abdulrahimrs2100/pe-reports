# Generated by Django 4.1.3 on 2022-11-22 16:47

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AlembicVersion",
            fields=[
                (
                    "version_num",
                    models.CharField(max_length=32, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "alembic_version",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Alerts",
            fields=[
                ("alerts_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("alert_name", models.TextField(blank=True, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("sixgill_id", models.TextField(blank=True, null=True, unique=True)),
                ("read", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                ("site", models.TextField(blank=True, null=True)),
                ("threat_level", models.TextField(blank=True, null=True)),
                ("threats", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("user_id", models.TextField(blank=True, null=True)),
                ("category", models.TextField(blank=True, null=True)),
                ("lang", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "alerts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Alias",
            fields=[
                ("alias_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("alias", models.TextField(unique=True)),
            ],
            options={
                "db_table": "alias",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AssetHeaders",
            fields=[
                ("sub_url", models.TextField()),
                ("tech_detected", models.TextField()),
                ("interesting_header", models.TextField()),
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "asset_headers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CybersixExposedCredentials",
            fields=[
                (
                    "csg_exposed_credentials_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("breach_date", models.DateField(blank=True, null=True)),
                ("breach_id", models.IntegerField(blank=True, null=True)),
                ("breach_name", models.TextField()),
                ("create_time", models.DateTimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("domain", models.TextField(blank=True, null=True)),
                ("email", models.TextField()),
                ("password", models.TextField(blank=True, null=True)),
                ("hash_type", models.TextField(blank=True, null=True)),
                ("login_id", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cybersix_exposed_credentials",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DnstwistDomainMasq",
            fields=[
                (
                    "suspected_domain_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                (
                    "domain_permutation",
                    models.TextField(blank=True, null=True, unique=True),
                ),
                ("ipv4", models.TextField(blank=True, null=True)),
                ("ipv6", models.TextField(blank=True, null=True)),
                ("mail_server", models.TextField(blank=True, null=True)),
                ("name_server", models.TextField(blank=True, null=True)),
                ("fuzzer", models.TextField(blank=True, null=True)),
                ("date_observed", models.DateField(blank=True, null=True)),
                ("ssdeep_score", models.TextField(blank=True, null=True)),
                ("malicious", models.BooleanField(blank=True, null=True)),
                ("blocklist_attack_count", models.IntegerField(blank=True, null=True)),
                ("blocklist_report_count", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "dnstwist_domain_masq",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Executives",
            fields=[
                ("executives_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("executives", models.TextField()),
            ],
            options={
                "db_table": "executives",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HibpBreaches",
            fields=[
                (
                    "hibp_breaches_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("breach_name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("exposed_cred_count", models.BigIntegerField(blank=True, null=True)),
                ("breach_date", models.DateField(blank=True, null=True)),
                ("added_date", models.DateTimeField(blank=True, null=True)),
                ("modified_date", models.DateTimeField(blank=True, null=True)),
                ("data_classes", models.TextField(blank=True, null=True)),
                ("password_included", models.BooleanField(blank=True, null=True)),
                ("is_verified", models.BooleanField(blank=True, null=True)),
                ("is_fabricated", models.BooleanField(blank=True, null=True)),
                ("is_sensitive", models.BooleanField(blank=True, null=True)),
                ("is_retired", models.BooleanField(blank=True, null=True)),
                ("is_spam_list", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "hibp_breaches",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HibpExposedCredentials",
            fields=[
                (
                    "hibp_exposed_credentials_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("email", models.TextField()),
                ("root_domain", models.TextField(blank=True, null=True)),
                ("sub_domain", models.TextField(blank=True, null=True)),
                ("breach_name", models.TextField(blank=True, null=True)),
                ("modified_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "hibp_exposed_credentials",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mentions",
            fields=[
                ("mentions_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("category", models.TextField(blank=True, null=True)),
                ("collection_date", models.TextField(blank=True, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("creator", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "sixgill_mention_id",
                    models.TextField(blank=True, null=True, unique=True),
                ),
                ("post_id", models.TextField(blank=True, null=True)),
                ("lang", models.TextField(blank=True, null=True)),
                ("rep_grade", models.TextField(blank=True, null=True)),
                ("site", models.TextField(blank=True, null=True)),
                ("site_grade", models.TextField(blank=True, null=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("url", models.TextField(blank=True, null=True)),
                ("comments_count", models.TextField(blank=True, null=True)),
                ("sub_category", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("organizations_uid", models.UUIDField()),
            ],
            options={
                "db_table": "mentions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Organizations",
            fields=[
                (
                    "organizations_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("name", models.TextField(unique=True)),
                ("cyhy_db_name", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "organizations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RootDomains",
            fields=[
                (
                    "root_domain_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization_name", models.TextField()),
                ("root_domain", models.TextField()),
                ("ip_address", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "root_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanAssets",
            fields=[
                (
                    "shodan_asset_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_assets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanInsecureProtocolsUnverifiedVulns",
            fields=[
                (
                    "insecure_product_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("potential_vulns", models.TextField(blank=True, null=True)),
                ("mitigation", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("server", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_insecure_protocols_unverified_vulns",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ShodanVerifiedVulns",
            fields=[
                (
                    "verified_vuln_uid",
                    models.UUIDField(primary_key=True, serialize=False),
                ),
                ("organization", models.TextField(blank=True, null=True)),
                ("ip", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("cve", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                (
                    "cvss",
                    models.DecimalField(
                        blank=True, decimal_places=65535, max_digits=65535, null=True
                    ),
                ),
                ("summary", models.TextField(blank=True, null=True)),
                ("product", models.TextField(blank=True, null=True)),
                ("attack_vector", models.TextField(blank=True, null=True)),
                ("av_description", models.TextField(blank=True, null=True)),
                ("attack_complexity", models.TextField(blank=True, null=True)),
                ("ac_description", models.TextField(blank=True, null=True)),
                ("confidentiality_impact", models.TextField(blank=True, null=True)),
                ("ci_description", models.TextField(blank=True, null=True)),
                ("integrity_impact", models.TextField(blank=True, null=True)),
                ("ii_description", models.TextField(blank=True, null=True)),
                ("availability_impact", models.TextField(blank=True, null=True)),
                ("ai_description", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
                ("domains", models.TextField(blank=True, null=True)),
                ("hostnames", models.TextField(blank=True, null=True)),
                ("isn", models.TextField(blank=True, null=True)),
                ("asn", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "shodan_verified_vulns",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubDomains",
            fields=[
                ("sub_domain_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("sub_domain", models.TextField()),
                ("root_domain_uid", models.UUIDField()),
                ("root_domain", models.TextField()),
            ],
            options={
                "db_table": "sub_domains",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TopCves",
            fields=[
                ("top_cves_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("cve_id", models.TextField(blank=True, null=True)),
                ("dynamic_rating", models.TextField(blank=True, null=True)),
                ("nvd_base_score", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "top_cves",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UniqueSoftware",
            fields=[
                (
                    "field_id",
                    models.UUIDField(
                        db_column="_id", primary_key=True, serialize=False
                    ),
                ),
                ("software_name", models.TextField()),
            ],
            options={
                "db_table": "unique_software",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "email",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                ("admin", models.IntegerField(blank=True, null=True)),
                ("role", models.IntegerField(blank=True, null=True)),
                (
                    "password_hash",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True, max_length=128, null=True, unique=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, max_length=128, null=True, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "Users",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Usersapi",
            fields=[
                ("id", models.UUIDField(primary_key=True, serialize=False)),
                (
                    "email",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "password_hash",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "UsersAPI",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="WebAssets",
            fields=[
                ("asset_uid", models.UUIDField(primary_key=True, serialize=False)),
                ("asset_type", models.TextField()),
                ("asset", models.TextField(unique=True)),
                ("ip_type", models.TextField(blank=True, null=True)),
                ("verified", models.BooleanField(blank=True, null=True)),
                ("asset_origin", models.TextField(blank=True, null=True)),
                ("report_on", models.BooleanField(blank=True, null=True)),
                ("last_scanned", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "web_assets",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SubDomainsWebAssets",
            fields=[
                (
                    "sub_domain_uid",
                    models.OneToOneField(
                        db_column="sub_domain_uid",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="home.subdomains",
                    ),
                ),
            ],
            options={
                "db_table": "sub_domains_web_assets",
                "managed": False,
            },
        ),
    ]
