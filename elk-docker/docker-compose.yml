#Need to increase vm.max_map_count

#echo vm.max_map_count=262144 >> /etc/sysctl.conf 
#sudo sysctl -p

version: "3.5"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: setup # Set the container name to "setup"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # Map the "certs" volume to the Elasticsearch certs directory
    user: "0" # Run the container as root (user ID 0)
    command: > # Define a multi-line command to run in the container
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting ${KIBANA_USERNAME} password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/${KIBANA_USERNAME}/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '            
    healthcheck:
      # Healthcheck configuration for the setup service
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s # Check every 1 second
      timeout: 5s # Timeout after 5 seconds
      retries: 120 # Retry up to 120 times before marking the service as unhealthy
    networks:
      - elk

  es01:
    # Elasticsearch service (Node 1)
    depends_on:
      setup:
        condition: service_healthy # Start only when the setup service is healthy (certificates and user passwords are created)
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION} # Elasticsearch image to use
    container_name: es01 # Name for the container
    volumes:
      - certs:/usr/share/elasticsearch/config/certs # Mount the certificates directory
      - esdata01:/usr/share/elasticsearch/data # Mount the data directory for Elasticsearch
    ports:
      - ${ES_PORT}:${ES_PORT} # Expose Elasticsearch's HTTP API
    environment:
      # Environment variables for configuring Elasticsearch
      - node.name=es01 # Set the node name
      - cluster.name=${CLUSTER_NAME} # Set the cluster name
      - cluster.initial_master_nodes=es01 # Set the initial master node for the cluster
      - discovery.seed_hosts="" # Empty seed hosts (single-node cluster)
      - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Set the password for the "elastic" user
      - bootstrap.memory_lock=true # Lock the process address space into RAM to prevent swapping
      - xpack.security.enabled=true # Enable X-Pack security features
      - xpack.security.http.ssl.enabled=true # Enable SSL for the HTTP API
      - xpack.security.http.ssl.key=certs/es01/es01.key # Set the SSL key file
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt # Set the SSL certificate file
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt # Set the SSL certificate authority
      - xpack.security.http.ssl.verification_mode=certificate # Set the SSL verification mode
      - xpack.security.transport.ssl.enabled=true # Enable SSL for the transport layer
      - xpack.security.transport.ssl.key=certs/es01/es01.key # Set the transport SSL key file
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt # Set the transport SSL certificate file
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt # Set the transport SSL certificate authority
      - xpack.security.transport.ssl.verification_mode=certificate # Set the transport SSL verification mode
      - xpack.license.self_generated.type=${LICENSE} # Set the type of self-generated license
    mem_limit: ${MEM_LIMIT} # Set the memory limit for the container
    ulimits:
      # Set the ulimits for the container
      memlock:
        # Memory lock ulimits
        soft: -1
        hard: -1
    healthcheck:
      test:
        # Test command for the healthcheck
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s # Interval between healthcheck attempts
      timeout: 10s # Timeout for each healthcheck attempt
      retries: 120 # Number of retries before the service is considered unhealthy
    networks:
      - elk

  kibana:
    # Kibana service
    depends_on:
      es01:
        condition: service_healthy # Start only when the Elasticsearch service (es01) is healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION} # Kibana image to use
    container_name: kibana # Name for the container
    volumes:
      - certs:/usr/share/kibana/config/certs # Mount the certificates directory
      - kibanadata:/usr/share/kibana/data # Mount the data directory for Kibana
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT} # Expose Kibana's HTTP API
    environment:
      # Environment variables for configuring Kibana
      - SERVERNAME=kibana # Set the server name
      - ELASTICSEARCH_HOSTS=https://es01:9200 # Set the Elasticsearch hosts
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME} # Set the Elasticsearch username
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD} # Set the Elasticsearch password
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt # Set the SSL certificate authority
      - XPACK_REPORTING_ROLES_ENABLED=false # Disable reporting roles
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME="localhost" # Set the reporting Kibana server hostname
      - XPACK_SECURITY_ENCRYPTIONKEY=${CRYPTO_PASSWORD} # Set the encryption key for security features
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${CRYPTO_PASSWORD} # Set the encryption key for encrypted saved objects
      - ES_ENFORCE_BOOTSTRAP_CHECKS=false # Disable enforcement of bootstrap checks
      - XPACK_REPORTING_ENCRYPTIONKEY=${CRYPTO_PASSWORD} # Set the encryption key for reporting
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS:'["https://es01:9200"]'
    mem_limit: ${MEM_LIMIT} # Set the memory limit for the container
    healthcheck:
      # Healthcheck for the Kibana servi
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s # Interval between healthcheck attempts
      timeout: 10s # Timeout for each healthcheck attempt
      retries: 120 # Number of retries before the service is considered unhealthy
    networks:
      - elk

  logstash:
    # Logstash service
    depends_on:
      # Define dependencies for the service
      es01:
        condition: service_healthy # Start only when the Elasticsearch service (es01) is healthy
    build:
      context: . # Docker build context
      dockerfile: Dockerfile.logstash # Path to the Logstash Dockerfile
    container_name: logstash # Name for the container
    volumes:
      - ./logstash.conf:/usr/share/logstash/config/logstash.conf # Mount the Logstash configuration file
      - ./logs:/usr/share/logstash/logs # Mount the logs directory for Logstash
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml # Mount the Logstash YAML configuration file
      - certs:/usr/share/logstash/config/certs # Mount the certificates directory
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m" # Set the Java options for Logstash (memory settings)
    ports:
      - ${LOGSTASH_PORT}:${LOGSTASH_PORT} # Expose Logstash's listening port
    mem_limit: ${MEM_LIMIT} # Set the memory limit for the container
    networks:
      - elk

  metricbeat:
    # Metricbeat service
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION} # Metricbeat image to use
    container_name: metricbeat # Name for the container
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml # Mount the Metricbeat configuration file
      - /var/run/docker.sock:/var/run/docker.sock # Mount the Docker socket for container metrics
      - certs:/usr/share/metricbeat/config/certs
    depends_on:
      # Define dependencies for the service
      - logstash
      - es01
    command: metricbeat -e -strict.perms=false # Start Metricbeat with error logging and disabled strict permission checks
    networks:
      - elk

  filebeat:
    # Filebeat Service
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION} # Filebeat image to use
    depends_on:
      # Define dependencies for the service
      es01:
        condition: service_healthy # Start only when the Elasticsearch service (es01) is healthy
    container_name: filebeat
    user: root
    volumes:
      - ./filebeats.yml:/usr/share/filebeat/filebeat.yml # Mount the Filebeats configuration file
      - certs:/usr/share/filebeat/config/certs # Mount the certificates directory
      - /var/log:/var/log
    command: filebeat -e -strict.perms=false # Start Filebeats with error logging and disabled strict permission checks
    networks:
      - elk

  nginx:
    # Nginx service
    depends_on:
      # Define dependencies for the service
      kibana:
        condition: service_healthy
    image: nginx:stable # Use the stable Nginx image
    container_name: nginx # Name for the container
    ports:
      # Expose Nginx ports
      - "80:80" # Map host port 80 to container port 80 (HTTP)
      - "443:443" # Map host port 443 to container port 443 (HTTPS)
    volumes:
      # Define volumes for the service
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Mount the Nginx configuration file as read-only
      - certs:/etc/nginx/certs # Mount the SSL certificates directory as read-only
      - ./logs:/var/log/nginx # Mount the Nginx logs directory
    networks:
      - elk

volumes:
  # Define volumes used in the services
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local

networks:
  elk:
    driver: bridge
